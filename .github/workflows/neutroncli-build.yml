name: Build, Package, and Publish neutroncli

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-package:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Get version from tag
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      shell: bash
    
    - name: Publish
      run: dotnet publish ./neutroncli/neutroncli.csproj --configuration Release --runtime ${{ matrix.platform }}-${{ matrix.arch }} --self-contained true --output ./publish

    # - name: Create and Publish Chocolatey package
    #   if: matrix.os == 'windows-latest'
    #   env:
    #     CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
    #   run: |
    #     # Create Chocolatey package structure
    #     mkdir -p ./choco/tools
    #     Copy-Item ./publish/* ./choco/tools -Recurse
        
    #     # Create Chocolatey nuspec file
    #     $nuspec = @"
    #     <?xml version="1.0" encoding="utf-8"?>
    #     <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
    #       <metadata>
    #         <id>neutroncli</id>
    #         <version>${{ steps.get_version.outputs.VERSION }}</version>
    #         <title>neutroncli</title>
    #         <authors>AnnasVirtual</authors>
    #         <projectUrl>https://github.com/annasajkh/Neutron</projectUrl>
    #         <tags>cli dotnet webview</tags>
    #         <description>Build apps with C# and web technologies using webview</description>
    #       </metadata>
    #     </package>
    #     "@
    #     $nuspec | Out-File -Encoding utf8 ./choco/neutroncli.nuspec

    #     # Create Chocolatey installation script
    #     $installScript = @"
    #     `$toolsDir   = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
    #     `$fileLocation = Join-Path `$toolsDir 'neutroncli.exe'
        
    #     if (Test-Path `$fileLocation) {
    #         Write-Host "Installing binary from `$fileLocation"
    #         Install-BinFile -Name 'neutroncli' -Path `$fileLocation
    #     } else {
    #         Write-Error "Binary file not found at `$fileLocation"
    #     }
    #     "@
    #     $installScript | Out-File -Encoding utf8 ./choco/tools/chocolateyinstall.ps1

    #     # Pack and Push Chocolatey package
    #     choco pack ./choco/neutroncli.nuspec --outputdirectory ./choco
    #     choco push ./choco/neutroncli.${{ steps.get_version.outputs.VERSION }}.nupkg --source https://push.chocolatey.org/ --api-key $env:CHOCO_API_KEY

    - name: Create Linux packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create directory for packages
        mkdir -p ./linux_packages

        # Create DEB package
        mkdir -p ./deb_package/DEBIAN
        mkdir -p ./deb_package/usr/local/bin
        cp ./publish/neutroncli ./deb_package/usr/local/bin/
        echo "Package: neutroncli
        Version: ${{ steps.get_version.outputs.VERSION }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: AnnasVirtual
        Description: Build apps with C# and web technologies using webview
        " > ./deb_package/DEBIAN/control
        dpkg-deb --build ./deb_package ./linux_packages/neutroncli_${{ steps.get_version.outputs.VERSION }}_amd64.deb

        # Create RPM package
        mkdir -p ./rpm_package/BUILD ./rpm_package/RPMS ./rpm_package/SOURCES ./rpm_package/SPECS
        cp ./publish/neutroncli ./rpm_package/SOURCES/
        echo "Name: neutroncli
        Version: ${{ steps.get_version.outputs.VERSION }}
        Release: 1
        Summary: Build apps with C# and web technologies using webview
        License: MIT
        
        %description
        neutroncli is a tool to build apps with C# and web technologies using webview.
        
        %files
        /usr/local/bin/neutroncli
        
        %install
        mkdir -p %{buildroot}/usr/local/bin
        cp %{_sourcedir}/neutroncli %{buildroot}/usr/local/bin/
        " > ./rpm_package/SPECS/neutroncli.spec
        rpmbuild -bb ./rpm_package/SPECS/neutroncli.spec --define "_topdir `pwd`/rpm_package"
        cp ./rpm_package/RPMS/x86_64/neutroncli-${{ steps.get_version.outputs.VERSION }}-1.x86_64.rpm ./linux_packages/

    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: linux-packages
        path: ./linux_packages/*


  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
    - name: Download Linux packages
      uses: actions/download-artifact@v3
      with:
        name: linux-packages

    - name: Upload DEB and RPM to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./linux_packages/neutroncli_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        asset_name: neutroncli_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        asset_content_type: application/x-debian-package

    - name: Upload RPM to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./linux_packages/neutroncli-${{ steps.get_version.outputs.VERSION }}-1.x86_64.rpm
        asset_name: neutroncli-${{ steps.get_version.outputs.VERSION }}-1.x86_64.rpm
        asset_content_type: application/x-rpm