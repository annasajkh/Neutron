name: Publish neutroncli
on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "main" ]
permissions:
  contents: write
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Cache .NET dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Publish
      run: dotnet publish ./neutroncli/neutroncli.csproj --configuration Release --runtime ${{ matrix.platform }}-${{ matrix.arch }} --self-contained true --output ./publish
    
    - name: Create portable artifact
      run: |
        if ("${{ matrix.os }}" -eq "windows-latest") {
          Compress-Archive -Path ./publish/* -DestinationPath ./neutroncli-portable-${{ matrix.platform }}-${{ matrix.arch }}.zip
        } else {
          zip -r ./neutroncli-portable-${{ matrix.platform }}-${{ matrix.arch }}.zip ./publish
        }
      shell: pwsh
    
    - name: Copy icon file
      if: matrix.os == 'windows-latest'
      run: |
        Copy-Item "./publish/icon.ico" -Destination "$env:TEMP\icon.ico"
      shell: pwsh
    
    - name: Create NSIS installer (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install NSIS
        choco install nsis -y
        if (-not (Test-Path "C:\Program Files (x86)\NSIS\makensis.exe")) {
          Write-Error "NSIS installation failed"
          exit 1
        }
        
        # Create NSIS script (installer.nsi)
        $nsisScript = @'
        !include "MUI2.nsh"
        Name "neutroncli"
        OutFile "neutroncli-installer-${{ matrix.platform }}-${{ matrix.arch }}.exe"
        InstallDir "$PROGRAMFILES64\neutroncli"
        !define MUI_ICON "$%TEMP%\icon.ico"
        !define MUI_UNICON "$%TEMP%\icon.ico"

        VIProductVersion "0.1.5.0"
        VIAddVersionKey "ProductName" "neutroncli"
        VIAddVersionKey "FileDescription" "Build apps with c# and web technologies using webview"
        VIAddVersionKey "LegalCopyright" "AnnasVirtual"
        VIAddVersionKey "FileVersion" "0.1.5.0"
        VIAddVersionKey "ProductVersion" "0.1.5.0"
        VIAddVersionKey "CompanyName" "AnnasVirtual"

        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        !insertmacro MUI_UNPAGE_WELCOME
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_UNPAGE_FINISH
        !insertmacro MUI_LANGUAGE "English"

        Section
          SetOutPath $INSTDIR
          File /r "publish\*.*"
          
          CreateShortcut "$SMPROGRAMS\neutroncli\neutroncli.lnk" "$INSTDIR\neutroncli.exe" "" "$INSTDIR\icon.ico"
          CreateShortcut "$DESKTOP\neutroncli.lnk" "$INSTDIR\neutroncli.exe" "" "$INSTDIR\icon.ico"

          WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path" "$\"$INSTDIR;$%PATH%$\""
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli" "DisplayName" "neutroncli"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli" "UninstallString" "$INSTDIR\Uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli" "DisplayIcon" "$INSTDIR\icon.ico"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli" "Publisher" "AnnasVirtual"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli" "URLInfoAbout" "https://github.com/annasajkh/Neutron"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli" "DisplayVersion" "0.1.5.0"
          WriteUninstaller "$INSTDIR\Uninstall.exe"
        SectionEnd

        Section "Uninstall"
          Delete "$SMPROGRAMS\neutroncli\neutroncli.lnk"
          Delete "$DESKTOP\neutroncli.lnk"
          RMDir /r "$INSTDIR"
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\neutroncli"

          # Remove neutroncli from PATH
          ReadRegStr $R0 HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path"
          ${If} $R0 != ""
            Push "$R0"
            Push "$INSTDIR;"
            Call RemoveFromPath
            Pop $R1
            WriteRegStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path" "$R1"
          ${EndIf}
        SectionEnd

        Function RemoveFromPath
          Exch $0  ; Path to remove
          Exch
          Exch $1  ; Full path string
          StrCpy $R1 ""
          StrCpy $R2 0
          loop:
            StrCpy $R0 $1 1 $R2
            StrCmp $R0 "" done
            IntOp $R2 $R2 + 1
            StrCmp $R0 ";" next
            StrCpy $R1 "$R1$R0"
            Goto loop
          next:
            IntOp $R2 $R2 + 1
            StrCpy $R0 $1 "" $R2
            StrCmp $0 $R0 +2
            Goto next
          done:
            Pop $0
        FunctionEnd

        '@
        $nsisScript | Out-File -Encoding ASCII installer.nsi
        
        # Build installer
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
        
        if (-not (Test-Path "neutroncli-installer-${{ matrix.platform }}-${{ matrix.arch }}.exe")) {
          Write-Error "Installer creation failed"
          exit 1
        }
        
        Write-Output "Installer created successfully"
      shell: pwsh
      
    - name: Upload portable artifact
      uses: actions/upload-artifact@v3
      with:
        name: portable-${{ matrix.platform }}-${{ matrix.arch }}
        path: ./neutroncli-portable-${{ matrix.platform }}-${{ matrix.arch }}.zip
    
    - name: Upload installer artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: installer-${{ matrix.platform }}-${{ matrix.arch }}
        path: ./neutroncli-installer-${{ matrix.platform }}-${{ matrix.arch }}.exe


  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
    
    - name: Validate artifacts
      run: |
        for file in ./*/*.zip; do
          if ! unzip -t "$file" > /dev/null; then
            echo "Error: $file is not a valid zip file"
            exit 1
          fi
        done
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        assets=""
        for file in ./*/*.zip; do
          assets="$assets $file"
        done
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --generate-notes \
          $assets